{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://packagem/./src/InstallerPanel.ts","webpack://packagem/./src/extension.ts","webpack://packagem/./src/getNonce.ts","webpack://packagem/external commonjs \"vscode\"","webpack://packagem/webpack/bootstrap","webpack://packagem/webpack/startup"],"sourcesContent":["import * as vscode from \"vscode\";\nimport { getNonce } from \"./getNonce\";\n\nexport class InstallerPanel {\n  /**\n   * Track the currently panel. Only allow a single panel to exist at a time.\n   */\n  public static currentPanel: InstallerPanel | undefined;\n\n  public static readonly viewType = \"packagem-installer\";\n\n  private readonly _panel: vscode.WebviewPanel;\n  private readonly _extensionUri: vscode.Uri;\n  private _disposables: vscode.Disposable[] = [];\n\n  public static createOrShow(extensionUri: vscode.Uri) {\n    const column = vscode.window.activeTextEditor\n      ? vscode.window.activeTextEditor.viewColumn\n      : undefined;\n\n    // If we already have a panel, show it.\n    if (InstallerPanel.currentPanel) {\n      InstallerPanel.currentPanel._panel.reveal(column);\n      InstallerPanel.currentPanel._update();\n      return;\n    }\n\n    // Otherwise, create a new panel.\n    const panel = vscode.window.createWebviewPanel(\n      InstallerPanel.viewType,\n      \"VSinder\",\n      column || vscode.ViewColumn.One,\n      {\n        // Enable javascript in the webview\n        enableScripts: true,\n\n        // And restrict the webview to only loading content from our extension's `media` directory.\n        localResourceRoots: [\n          vscode.Uri.joinPath(extensionUri, \"media\"),\n          vscode.Uri.joinPath(extensionUri, \"out/compiled\"),\n        ],\n      }\n    );\n\n    InstallerPanel.currentPanel = new InstallerPanel(panel, extensionUri);\n  }\n\n  public static kill() {\n    InstallerPanel.currentPanel?.dispose();\n    InstallerPanel.currentPanel = undefined;\n  }\n\n  public static revive(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {\n    InstallerPanel.currentPanel = new InstallerPanel(panel, extensionUri);\n  }\n\n  private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {\n    this._panel = panel;\n    this._extensionUri = extensionUri;\n\n    // Set the webview's initial html content\n    this._update();\n\n    // Listen for when the panel is disposed\n    // This happens when the user closes the panel or when the panel is closed programatically\n    this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\n\n    // // Handle messages from the webview\n    // this._panel.webview.onDidReceiveMessage(\n    //   (message) => {\n    //     switch (message.command) {\n    //       case \"alert\":\n    //         vscode.window.showErrorMessage(message.text);\n    //         return;\n    //     }\n    //   },\n    //   null,\n    //   this._disposables\n    // );\n  }\n\n  public dispose() {\n    InstallerPanel.currentPanel = undefined;\n\n    // Clean up our resources\n    this._panel.dispose();\n\n    while (this._disposables.length) {\n      const x = this._disposables.pop();\n      if (x) {\n        x.dispose();\n      }\n    }\n  }\n\n  private async _update() {\n    const webview = this._panel.webview;\n\n    this._panel.webview.html = this._getHtmlForWebview(webview);\n    webview.onDidReceiveMessage(async (data) => {\n      switch (data.type) {\n        // case \"report\": {\n        //   const message = await vscode.window.showInputBox({\n        //     placeHolder: \"why are you reporting this user?\",\n        //   });\n        //   if (message) {\n        //     await mutationNoErr(`/report`, { message, ...data.value });\n        //     webview.postMessage({\n        //       command: \"report-done\",\n        //       data,\n        //     });\n        //     vscode.window.showInformationMessage(\"Thank you for reporting!\");\n        //   }\n        //   break;\n        // }\n        // case \"set-window-info\": {\n        //   const { displayName, flair } = data.value;\n        //   this._panel.title = displayName;\n        //   if (flair in flairMap) {\n        //     const both = vscode.Uri.parse(\n        //       `https://flair.benawad.com/` +\n        //         flairMap[flair as keyof typeof flairMap]\n        //     );\n        //     this._panel.iconPath = {\n        //       light: both,\n        //       dark: both,\n        //     };\n        //   }\n        //   break;\n        // }\n        case \"onInfo\": {\n          if (!data.value) {\n            return;\n          }\n          vscode.window.showInformationMessage(data.value);\n          break;\n        }\n        case \"onError\": {\n          if (!data.value) {\n            return;\n          }\n          vscode.window.showErrorMessage(data.value);\n          break;\n        }\n      \n      }\n    });\n  }\n\n  private _getHtmlForWebview(webview: vscode.Webview) {\n    // // And the uri we use to load this script in the webview\n    const scriptUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"main.js\")\n    );\n\n    // Uri to load styles into webview\n    const stylesResetUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"reset.css\")\n    );\n\n    const stylesMainUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"vscode.css\")\n    );\n\n    // Use a nonce to only allow specific scripts to be run\n    const nonce = getNonce();\n\n    return `<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<!--\n\t\t\t\t\tUse a content security policy to only allow loading images from https or from our extension directory,\n\t\t\t\t\tand only allow scripts that have a specific nonce.\n        -->\n        <meta http-equiv=\"Content-Security-Policy\"  img-src https: data:; style-src 'unsafe-inline' ${\n      webview.cspSource\n    }; script-src 'nonce-${nonce}';\">\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t<link href=\"${stylesResetUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${stylesMainUri}\" rel=\"stylesheet\">\n        <script nonce=\"${nonce}\">\n            const tsvscode = acquireVsCodeApi();\n        </script>\n\t\t\t</head>\n      <body>\n      <h1>Hello world my package</h1>\n      <input type=\"text\" /> <button id=\"search\">Search</button>\n\t\t\t</body>\n\t\t\t\t<script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n\t\t\t</html>`;\n  }\n}","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\nimport { InstallerPanel } from \"./InstallerPanel\";\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\n  // This line of code will only be executed once when your extension is activated\n  console.log('Congratulations, your extension \"packagem\" is now active...!');\n\n  // The command has been defined in the package.json file\n  // Now provide the implementation of the command with registerCommand\n  // The commandId parameter must match the command field in package.json\n  let disposable = vscode.commands.registerCommand(\n    \"packagem.helloWorldx\",\n    () => {\n      // The code you place here will be executed every time your command is executed\n      // Display a message box to the user\n      // const panel = vscode.window.createWebviewPanel(\n      //   \"Packagem\",\n      //   \"Package Manager\",\n      //   vscode.ViewColumn.One,\n      //   {}\n      // );\n      InstallerPanel.createOrShow(context.extensionUri);\n    //   let data: any;\n    //   (async () => {\n    \n    //   })();\n\n      vscode.window.showInformationMessage(\"Hello world\");\n    }\n  );\n\n  context.subscriptions.push(disposable);\n}\n\n\n\nfunction getWebviewContent() {\n  let generator = `<!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <script>\n  (function() {\n    const vscode = acquireVsCodeApi()\n    const search = document.getElementById('search');\n    vscode.postMessage({\n      command: 'alert',\n      text: search.textContent\n    })\n    console.log(search.textContent)\n  }())\n</script>\n  </head>\n  <body>\n\t<h3>Packagem</h3>\n\t<div className=\"search\">\n            <h2>Packagem Search</h2>\n            <div class=\"inner\">\n                <input type=\"text\" value=\"\" />\n                <button id=\"search\">Search</button>\n            </div>\n            <div class=\"package-managers\">\n                <a href=\"#\">\n                    <img src=\"https://res.cloudinary.com/denj7z5ec/image/upload/v1669411991/js_zgy2wh.png\" width=\"50\" height=\"50\" />\n                </a>\n                <a href=\"#\">\n                    <img src=\"https://res.cloudinary.com/denj7z5ec/image/upload/v1669412388/php_tczkal.png\" width=\"50\" height=\"50\" />\n                </a>\n                <a href=\"#\">\n                    <img src=\"https://res.cloudinary.com/denj7z5ec/image/upload/v1669412388/go_qo9jg9.png\" width=\"50\" height=\"50\" />\n                </a>\n            </div>\n            <div>\n            </div>\n        </div>\n\t<div id=\"list\">\n\t</div>\n\n  </body>\n  </html>`;\n\n  return generator;\n}\n\nasync function searchPackage() {\n  // const response = await fetch(\n  // \t\"https://jsonplaceholder.typicode.com/posts\"\n  //   );\n  //   const data = await response.json();\n  //   const elem = document.getElementById('list');\n  //   let li = '';\n  //   for(let i in elem) {\n  //     li += '<li>' + i.title + '</li>';\n  //   }\n  //   elem.innerHTML = li\n}\n\n\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n\nclass Packagem {\n  private readonly _extensionPath: string;\n\n  private constructor(extensionPath: string) {\n    this._extensionPath = extensionPath;\n  }\n}","export function getNonce() {\n\tlet text = '';\n\tconst possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\tfor (let i = 0; i < 32; i++) {\n\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\n\t}\n\treturn text;\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["InstallerPanel","static","extensionUri","column","vscode","window","activeTextEditor","viewColumn","undefined","currentPanel","_panel","reveal","_update","panel","createWebviewPanel","viewType","ViewColumn","One","enableScripts","localResourceRoots","Uri","joinPath","dispose","_disposables","this","_extensionUri","onDidDispose","length","x","pop","webview","html","_getHtmlForWebview","onDidReceiveMessage","data","type","value","showInformationMessage","showErrorMessage","scriptUri","asWebviewUri","stylesResetUri","stylesMainUri","nonce","getNonce","cspSource","context","console","log","disposable","commands","registerCommand","createOrShow","subscriptions","push","text","possible","i","charAt","Math","floor","random","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}